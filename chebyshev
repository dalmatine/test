##########################################################
# PREDICTION FUNCTIONS MODULE
##########################################################


fact = rnorm(300)
port = - exp(fact) + rnorm(length(fact))
plot(fact,port)
lines(fitChebyshev(fact, port, q=quantile(x, c(0.05,0.95)),C=0), lwd=3, col=black(0.2))
lines(fitChebyshev(fact, port, q=c(-2,2),C=0), lwd=3, col=black(0.2))



op = polynomial.functions(chebyshev.c.polynomials(4)[-1])
y = fapply(op, x)

graph.sqLayout(2,2)
lapply(y, function(y) plot(x,y))

plot(x, opolyFn(x, method="linear")[,3])



opolyFn = function(x, q=quantile(x, c(0.16,0.84)), method="linear") {
	QQ = TT(x,3)
	if (method %in% c("linear", "constant")) {
		ixL = x <= q[1]
		ixR = x >= q[2]
		if (method == "linear") { # extrapolate linearly but smooth on the edges
			tmpL = matrix(rep(TT(q[1],3),sum(ixL)), ncol=4, byrow=TRUE) + as.matrix(x[ixL] - q[1]) %*% (dTT(q[1],3))
			tmpR = matrix(rep(TT(q[2],3),sum(ixR)), ncol=4, byrow=TRUE) + as.matrix(x[ixR] - q[2]) %*% (dTT(q[2],3))
		} else { # constant extrapolate
			tmpL = matrix(rep(TT(q[1],3),sum(ixL)), ncol=4, byrow=TRUE)
			tmpR = matrix(rep(TT(q[2],3),sum(ixR)), ncol=4, byrow=TRUE)
		}
		if (sum(ixL)>0) QQ[ixL,] = tmpL
		if (sum(ixR)>0) QQ[ixR,] = tmpR
	}
	QQ
}


fitChebyshev = function(fact, port, q=quantile(x,c(0.16,0.84)), C=1) {
	# function does not include nonlinear response to lags yet
	# q are the nodes (factor quantiles) for the function
	# C is the penalty for nonlinearity in x response
	# Cx and Cy are penalties for inclusion of respective lags
	ix = sort(fact, index.return=TRUE)$ix   # SORT P BY X
	x=fact[ix]
	y=port[ix]
	
	A = opolyFn(x=x, q=q, method="linear")
	N = length(y)
	# nonlinearity penalty matrix - this comes from the norm of the polynomial, L2 norm or Lp norm?
	O1 = matrix(0, ncol=4, nrow=4)
	O1[3,3] = 16 * (q[2]-q[1])
	O1[4,3] = O1[3,4] = 48 * (q[2]^2 - q[1]^2)
	O1[4,4] = 24^2/3*(q[2]^3 - q[1]^3)
	O1 = C * O1
	omega = O1
	# overall penalty matrix
	ApA = t(A) %*% A + omega
	AAinv = chol2inv(chol(ApA))
	betaHat = AAinv  %*% t(A) %*% y 
	ypred = A %*% betaHat
	return(list(x=x, y=ypred))
}




pp = cbind(pp, ypred=ypred)
r = (y - ypred)
RSS = sum(r^2)
MSS = sum((y-mean(y))^2)  #  = (N-1) * var(Y)
R2 = (MSS - RSS) / MSS
totPen = t(betaHat) %*% omega %*% betaHat
linPen = t(betaHat[1:4]) %*% omega[1:4, 1:4] %*% betaHat[1:4]
lagPen = t(betaHat[5:10]) %*% omega[5:10, 5:10] %*% betaHat[5:10]
penalty = data.frame(RSS=RSS, totPen=totPen, linPen=linPen, lagPen=lagPen)
ix2=(1:length(ix))[order(ix)]
p = pp[ix2,]
ret = list(param=betaHat, R2=R2, penalty = penalty, p=p)
# ret = list(L=L, R2=R2, penalty = penalty, p=p, A=A)
return(ret)
}



singleFactorPrediction = function(fund, facts, factList) {
	# loop over factors and make predictions
	predictions = tmpPred = NULL
	noPred = length(factList)
	for (fa in 1:noPred) {
		fact = getAsset(facts, factList[fa])
		sen = factorList[fa,]
		fit = ndFit(fund, fact, C=Cnlin, Clag=Clag)
		tmp = data.frame(t(fit$beta), xsd=fact$stats$sd, xm=fact$stats$median, ysd=fund$stats$sd, ym=fund$stats$median)
		tmp$pyRand = sample(fit$fit$p$y,1)
		tmp = cbind(tmp, t(pr$beta))
		tmp = cbind(code=factorList$code[fa], tmp)
		tmpPred = rbind(tmpPred, tmp)
	}
	if (param$scatterFile!='') dev.off()
	predictions = rbind(predictions, tmpPred)
	return(predictions)
}


# SINGLE FACTOR PREDICTION FUNCTION
ndFit = function(fund, fact, C, Clag) {
	data = generateData(fund, fact, py=1, px=1)
	q = getStats(fact)[c('q.16','q.84')]  # use global quantiles
	qBeta = getStats(fact)[c('q.1.','q.10','q.50','q.90','q.99')]
	# normalize X and Y returns
	sdx = getStats(fact)$sd 	# using global fact sd
	mx  = getStats(fact)$q.50
	sdy = getStats(fund)$sd			# using global fund sd
	my  = getStats(fund)$q.50
	x = (data$x - mx)/sdx  # normalize the data by the SD
	y = (data$y - my)/sdy
	lx = (data$x.l1 - mx)/sdx
	ly = (data$y.l1 - my)/sdy
	q  = (q-mx)/sdx
	qBeta = (qBeta - mx)/sdx
	# prepare data and add beta values
	p = as.data.frame(cbind(x=x,y=y,lx=lx,ly=ly))
	
	# fit a chebyshev polynomial
	fit = fitChebyshev(p, as.numeric(q), C=C, Cx=Clag, Cy=Clag)
	param = fit$param
	p = fit$p
	
	# calculate Betas
	pBeta = p[dim(p)[1],]
	for (i in 2:length(qBeta)) pBeta = rbind(pBeta, p[dim(p)[1],])
	pBeta$x = as.numeric(qBeta)
	pBeta$ly = pBeta$lx = 0
	pred = predChebyshev(pBeta,q,param)
	
	# deNormalize - back to real units
	deNormalize = function(p) {
		ix = grep("x", names(p))
		p[,ix] = p[,ix,] * sdx + mx
		iy = grep("y", names(p))
		p[,iy] = p[,iy] * sdy + my
		return(p)
	}
	fit$p = deNormalize(p)
	pred = deNormalize(pred)
	q = q*sdx + mx
	qBeta = qBeta * sdx + mx
	#
	beta =  c(pred$py[3]-pred$py[1:2],    pred$py[4:5]-pred$py[3])
	names(beta) = c("betaMM", "betaM", "betaP", "betaPP")
	fit = list(betas=beta, param=param, fit=fit, pred=pred, fund=fund, fact=fact)
	class(fit) = 'ndFit'
	return(fit)
}


##########################################
#### FIT PLOTTING AND PRINTING METHODS
print.ndFit = function(fit) {
	cat("Nonlinear dynamic fit.\n")
	cat("Betas:", round(fit$beta,3), "\n")
}



plot.ndFit = function(fit) {
	par(cex=1) #, mfcol=c(2,2))
	p = fit$fit$p
	ylim = range(c(p$y)) #,p$py))
	xlim = range(c(p$x))
	plot(p$x, p$y, col='red', ylab=paste(getCode(fit$fund),'returns'), xlab=paste(getCode(fit$fact), 'returns'), xlim=xlim, ylim=ylim, pch=20, las=1)
	#		 xlim=getStats(fact)[c("q.1", "q.99")], ylim=range(p$y))
	pp = p[order(p$x),]
	lines(pp$x, pp$ypred, col='blue')
	abline(v=fit$pred$x, lty=c(1,1,2,1,1), col='grey')
	abline(h=fit$pred$py, lty=c(1,1,2,1,1), col='grey')
	
	if (0) {
		pred = fit$betas
		px = pred$x; py=pred$py; pye=pred$yErr
		points(px, py, col='white')
		points(px, py, cex=1.5, col='blue', pch=2)
		arrows(px, py-pye, px, py+pye, angle=90, length=0.06, col='blue', code=3)
		points(p$x[p$pre & p$name!='data'], p$py[p$pre & p$name!='data'], col='blue', pch=5, cex=1)
		points(p$x[p$pre & p$name=='data'], p$y[p$pre & p$name=='data'], col='red', pch=2, cex=1.5)
		abline(v=q, lty=3)
		lines(p$x, p$py, lty=2,col='red', lwd=2)
	}
	beta = fit$betas
	subTit = sprintf("R2=%0.2f, nonLinPen=%4.2f, lagPen=%4.2f", fit$fit$R2, fit$fit$penalty$linPen, fit$fit$penalty$lagPen)
	# paste("R2=", round(fit$fit$R2,2), ", RSS=", round(fit$fit$penalty$RSS,2), ", nonLinPen=", round(fit$penalty$linPen,2), ", lagPen=", round(fit$penalty$lagPen,2), sep='')
	#tit = sprintf("Prediction for : betas = (%2.2f%%, %2.2f%%, %2.2f%%, %2.2f%%)\n (sensie, Xsensie) = (%1.2f, %1.2f)", as.character(fact$data$date[length(fact$data$date)]), beta[1]*100, beta[2]*100, beta[3]*100, beta[4]*100, tit[2], tit[3])
	
	tit = sprintf("Betas = (%2.2f%%, %2.2f%%, %2.2f%%, %2.2f%%)", beta[1]*100, beta[2]*100, beta[3]*100, beta[4]*100)
	title(main=tit, sub=subTit)
}

fitChebyshev = function(p,q,C,Cx,Cy) {
	# function does not include nonlinear response to lags yet
	# q are the nodes (factor quantiles) for the function
	# C is the penalty for nonlinearity in x response
	# Cx and Cy are penalties for inclusion of respective lags
	ix = sort(p$x, index.return=TRUE)$ix   # SORT P BY X
	pp=p[ix,]
	x=pp$x; y=pp$y; lx=pp$lx; ly=pp$ly
	A = fnA(x,lx,ly,qx=q)
	N = length(y)
	O1 = matrix(0, ncol=4, nrow=4)
	O1[3,3] = 16 * (q[2]-q[1])
	O1[4,4] = 24^2/3*(q[2]^3 - q[1]^3)
	O1[4,3] = O1[3,4] = 48 * (q[2]^2 - q[1]^2)
	O1 = C * O1
	O2 = diag(Cx, nrow=3)
	O3 = diag(Cy, nrow=3)
	z = matrix(0,ncol=3, nrow=4)
	z2 = matrix(0, ncol=3, nrow=3)
	P1 = cbind(O1,z,z)
	P2 = cbind(t(z),O2,z2)
	P3 = cbind(t(z), z2, O3)
	omega = rbind(P1,P2,P3)
	ApA = t(A) %*% A + omega
	AAinv = chol2inv(chol(ApA))
	L = AAinv  %*% t(A) %*% y
	ypred = A %*% L
	pp = cbind(pp, ypred=ypred)
	r = (y - ypred)
	RSS = sum(r^2)
	MSS = sum((y-mean(y))^2)  #  = (N-1) * var(Y)
	R2 = (MSS - RSS) / MSS
	totPen = t(L) %*% omega %*% L
	linPen = t(L[1:4]) %*% omega[1:4, 1:4] %*% L[1:4]
	lagPen = t(L[5:10]) %*% omega[5:10, 5:10] %*% L[5:10]
	penalty = data.frame(RSS=RSS, totPen=totPen, linPen=linPen, lagPen=lagPen)
	ix2=(1:length(ix))[order(ix)]
	p = pp[ix2,]
	ret = list(param=L, R2=R2, penalty = penalty, p=p)
	# ret = list(L=L, R2=R2, penalty = penalty, p=p, A=A)
	return(ret)
}

predChebyshev = function(p,q,L) {
	A = fnA(p$x,p$lx,p$ly,qx=as.numeric(q))
	ypred = A %*% L
	p = cbind(p, py=ypred)
	return(p)
}


fnA = function(x,lx=rnorm(length(x)),ly=rnorm(length(x)), qx ,qy=c(-1,1)) {
	# evaluate the 4 polynomials at x but  
	
	QQ = opolyFn(x, qx, method="linear")
	Qx = opolyFn(lx, qx, method="constant")
	Qy = opolyFn(ly, q=quantile(ly, c(0.16, 0.84)), method="constant")
	
	Qx = TT(lx,3)
	ix = lx <= q[1]
	tmp = matrix(rep(TT(q[1],3),sum(ix)), ncol=4, byrow=TRUE)
	if (sum(ix)>0) Qx[ix,] = tmp
	ix = lx >= q[2]
	tmp = matrix(rep(TT(q[2],3),sum(ix)), ncol=4, byrow=TRUE)
	if (sum(ix)>0) Qx[ix,] = tmp
	#
	q=qy
	Qy = TT(ly,3)
	ix = ly <= q[1]
	tmp = matrix(rep(TT(q[1],3),sum(ix)), ncol=4, byrow=TRUE)
	if (sum(ix)>0) Qy[ix,] = tmp
	ix = ly >= q[2]
	tmp = matrix(rep(TT(q[2],3),sum(ix)), ncol=4, byrow=TRUE)
	if (sum(ix)>0) Qy[ix,] = tmp
	#
	# Add all the constant terms together and remove all but one
	A = cbind(QQ, Qx, Qy)
	z = which(colnames(A)=='ret')
	A[,1] = rowSums(A[,z])
	if (length(x)==1) A = as.matrix(t(A[,-z[-1]])) else A = A[,-z[-1]]
	return(A)
}


#######################
### MATH FUNCTIONS ####
#######################

# Chebyshev polinomials of first and second kind
T = function(x, n=0) {
	if (n<0) return(rep(0), length(x)) else
	if (n==0) return(rep(1,length(x))) else
	if (n==1) return(x) else
		return (2*x*T(x,n-1) - T(x,n-2))
}
U = function(x, n=0) {
	if (n<0) return(rep(0), length(x)) else
	if (n==0) return(rep(1,length(x))) else
	if (n==1) return(2*x) else
		return (2*x*U(x,n-1) - U(x,n-2))
}
# Derivatives of Chebyshev 1st kind
dT = function(x, n=0) if (n==0) return(rep(0, length.out=length(x))) else return(n * U(x,n-1))

# returns a matrix with T0(x), T1(x), ..., Tn(x)
TT = function(x, n) {
	for (i in 1:(n+1)) if (i==1) ret = T(x, n=i-1) else ret=cbind(ret, T(x,n=i-1))
	return(ret)
}
dTT = function(x, n) {
	for (i in 1:(n+1)) if (i==1) ret = dT(x, n=i-1) else ret=cbind(ret, dT(x,n=i-1))
	return(ret)
}

# Chebyshev polinomial function
P = function(x, l) TT(x, length(l)-1) %*% l
# Gradient of the Cheby polinomial fn
dP= function(x, l) dTT(x, length(l)-1) %*% l


